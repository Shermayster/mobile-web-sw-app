{"version":3,"sources":["main.min.js","dbhelper.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","DBHelper","this","value","callback","xhr","XMLHttpRequest","open","DATABASE_URL","onload","status","json","JSON","parse","responseText","restaurants","error","send","id","fetchRestaurants","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","get","port"],"mappings":"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","file":"main.min.js","sourcesContent":["'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}} /* eslint-env browser */\n\n/**\nommon database helper functions.\nvar\nDBHelper = function () {function DBHelper() {_classCallCheck(this, DBHelper);}_createClass(DBHelper, null, [{ key: 'fetchRestaurants',\n\n\n\n\n\n\n\n\n\n\n\n    /**\n                                                                                                                                        * Fetch all restaurants.\n                                                                                                                                        */value: function fetchRestaurants(\n    callback) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', DBHelper.DATABASE_URL);\n      xhr.onload = function () {\n        if (xhr.status === 200) {\n          // Got a success response from server!\n          var json = JSON.parse(xhr.responseText);\n          var restaurants = json.restaurants;\n          callback(null, restaurants);\n        } else {\n          // Oops!. Got an error from server.\n          var error = 'Request failed. Returned status of ' + xhr.status;\n          callback(error, null);\n        }\n      };\n      xhr.send();\n    }\n\n    /**\n      *\n      * Fetch a restaurant by its ID.\n      * @param {number} id todo: add description\n      * @param {any} callback todo: add description\n      */ }, { key: 'fetchRestaurantById', value: function fetchRestaurantById(\n    id, callback) {\n      // fetch all restaurants with proper error handling.\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          var restaurant = restaurants.find(function (r) {return r.id === id;});\n          if (restaurant) {\n            // Got the restaurant\n            callback(null, restaurant);\n          } else {\n            // Restaurant does not exist in the database\n            callback('Restaurant does not exist', null);\n          }\n        }\n      });\n    }\n\n    /**\n       * Fetch restaurants by a cuisine type with proper error handling.\n       */ }, { key: 'fetchRestaurantByCuisine', value: function fetchRestaurantByCuisine(\n    cuisine, callback) {\n      // Fetch all restaurants  with proper error handling\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          // Filter restaurants to have only given cuisine type\n          var results = restaurants.filter(function (r) {return r.cuisine_type === cuisine;});\n          callback(null, results);\n        }\n      });\n    }\n\n    /**\n       * Fetch restaurants by a neighborhood with proper error handling.\n       */ }, { key: 'fetchRestaurantByNeighborhood', value: function fetchRestaurantByNeighborhood(\n    neighborhood, callback) {\n      // Fetch all restaurants\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          // Filter restaurants to have only given neighborhood\n          var results = restaurants.filter(function (r) {return r.neighborhood === neighborhood;});\n          callback(null, results);\n        }\n      });\n    }\n\n    /**\n       * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n       */ }, { key: 'fetchRestaurantByCuisineAndNeighborhood', value: function fetchRestaurantByCuisineAndNeighborhood(\n    cuisine, neighborhood, callback) {\n      // Fetch all restaurants\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          var results = restaurants;\n          if (cuisine !== 'all') {// filter by cuisine\n            results = results.filter(function (r) {return r.cuisine_type === cuisine;});\n          }\n          if (neighborhood !== 'all') {// filter by neighborhood\n            results = results.filter(function (r) {return r.neighborhood === neighborhood;});\n          }\n          callback(null, results);\n        }\n      });\n    }\n\n    /**\n       * Fetch all neighborhoods with proper error handling.\n       */ }, { key: 'fetchNeighborhoods', value: function fetchNeighborhoods(\n    callback) {\n      // Fetch all restaurants\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          // Get all neighborhoods from all restaurants\n          var neighborhoods = restaurants.map(function (v, i) {return restaurants[i].neighborhood;});\n          // Remove duplicates from neighborhoods\n          var uniqueNeighborhoods = neighborhoods.filter(function (v, i) {return neighborhoods.indexOf(v) === i;});\n          callback(null, uniqueNeighborhoods);\n        }\n      });\n    }\n\n    /**\n       * Fetch all cuisines with proper error handling.\n       */ }, { key: 'fetchCuisines', value: function fetchCuisines(\n    callback) {\n      // Fetch all restaurants\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          // Get all cuisines from all restaurants\n          var cuisines = restaurants.map(function (v, i) {return restaurants[i].cuisine_type;});\n          // Remove duplicates from cuisines\n          var uniqueCuisines = cuisines.filter(function (v, i) {return cuisines.indexOf(v) === i;});\n          callback(null, uniqueCuisines);\n        }\n      });\n    }\n\n    /**\n       * Restaurant page URL.\n       */ }, { key: 'urlForRestaurant', value: function urlForRestaurant(\n    restaurant) {\n      return './restaurant.html?id=' + restaurant.id;\n    }\n\n    /**\n       * Restaurant image URL.\n       */ }, { key: 'imageUrlForRestaurant', value: function imageUrlForRestaurant(\n    restaurant) {\n      return '/img/' + restaurant.photograph;\n    }\n\n    /**\n       * Map marker for a restaurant.\n       */ }, { key: 'mapMarkerForRestaurant', value: function mapMarkerForRestaurant(\n    restaurant, map) {\n      var marker = new google.maps.Marker({\n        position: restaurant.latlng,\n        title: restaurant.name,\n        url: DBHelper.urlForRestaurant(restaurant),\n        map: map,\n        animation: google.maps.Animation.DROP });\n\n      return marker;\n    } }, { key: 'DATABASE_URL', /**\n                                 * Database URL.\n                                 * Change this to restaurants.json file location on your server.\n                                 */get: function get() {// Change this to your server port\n      var port = 3000;return 'http://localhost:' + port + '/data/restaurants.json';} }]);return DBHelper;}();\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","/* eslint-env browser */\n\n/**\n * Common database helper functions.\n */\nclass DBHelper {\n\n  /**\n   * Database URL.\n   * Change this to restaurants.json file location on your server.\n   */\n  static get DATABASE_URL() {\n    // Change this to your server port\n    const port = 3000;\n    return `http://localhost:${port}/data/restaurants.json`;\n  }\n\n  /**\n   * Fetch all restaurants.\n   */\n  static fetchRestaurants(callback) {\n    let xhr = new XMLHttpRequest();\n    xhr.open('GET', DBHelper.DATABASE_URL);\n    xhr.onload = () => {\n      if (xhr.status === 200) {\n        // Got a success response from server!\n        const json = JSON.parse(xhr.responseText);\n        const restaurants = json.restaurants;\n        callback(null, restaurants);\n      } else {\n        // Oops!. Got an error from server.\n        const error = (`Request failed. Returned status of ${xhr.status}`);\n        callback(error, null);\n      }\n    };\n    xhr.send();\n  }\n\n   /**\n   *\n   * Fetch a restaurant by its ID.\n   * @param {number} id todo: add description\n   * @param {any} callback todo: add description\n   */\n  static fetchRestaurantById(id, callback) {\n    // fetch all restaurants with proper error handling.\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        const restaurant = restaurants.find(r => r.id === id);\n        if (restaurant) {\n          // Got the restaurant\n          callback(null, restaurant);\n        } else {\n          // Restaurant does not exist in the database\n          callback('Restaurant does not exist', null);\n        }\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine type with proper error handling.\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type === cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood === neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants;\n        if (cuisine !== 'all') { // filter by cuisine\n          results = results.filter(r => r.cuisine_type === cuisine);\n        }\n        if (neighborhood !== 'all') { // filter by neighborhood\n          results = results.filter(r => r.neighborhood === neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\n   * Fetch all neighborhoods with proper error handling.\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) === i);\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\n   * Fetch all cuisines with proper error handling.\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) === i);\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\n   * Restaurant page URL.\n   */\n  static urlForRestaurant(restaurant) {\n    return (`./restaurant.html?id=${restaurant.id}`);\n  }\n\n  /**\n   * Restaurant image URL.\n   */\n  static imageUrlForRestaurant(restaurant) {\n    return (`/img/${restaurant.photograph}`);\n  }\n\n  /**\n   * Map marker for a restaurant.\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map: map,\n      animation: google.maps.Animation.DROP}\n    );\n    return marker;\n  }\n\n}\n"]}