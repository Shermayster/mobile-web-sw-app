'use strict'; /* eslint-env browser */
/*global  DBHelper, google*/
var restaurants = void 0,
neighborhoods = void 0,
cuisines = void 0;
var map;
var markers = [];

/**
                   * Add service worker to main page
                   */

if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('./sw.js').then(function () {
    console.log('service worker registered!');
  }).
  catch(function (err) {
    console.log(err);
  });
}

/**
   * Set cuisines HTML.
   */
var fillCuisinesHTML = function fillCuisinesHTML() {var cuisines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.cuisines;
  var select = document.getElementById('cuisines-select');
  cuisines.forEach(function (cuisine) {
    var option = document.createElement('option');
    option.innerHTML = cuisine;
    option.value = cuisine;
    select.append(option);
  });
};

/**
    * Fetch all cuisines and set their HTML.
    */
var fetchCuisines = function fetchCuisines() {
  DBHelper.fetchCuisines(function (error, cuisines) {
    if (error) {
      // Got an error!
      console.error(error);
    } else {
      cuisines = cuisines;
      fillCuisinesHTML();
    }
  });
};

/**
    * Set neighborhoods HTML.
    */
var fillNeighborhoodsHTML = function fillNeighborhoodsHTML() {var neighborhoods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.neighborhoods;
  var select = document.getElementById('neighborhoods-select');
  neighborhoods.forEach(function (neighborhood) {
    var option = document.createElement('option');
    option.innerHTML = neighborhood;
    option.value = neighborhood;
    select.append(option);
  });
};

var appendRestaurantImage = function appendRestaurantImage(restaurant, li) {
  var image = document.createElement('img');
  image.className = 'restaurant-img';
  image.src = DBHelper.imageUrlForRestaurant(restaurant);
  image.alt = 'Restaurant: ' + restaurant.name;
  li.append(image);
};

var appendRestaurantTitle = function appendRestaurantTitle(restaurant, li) {
  var name = document.createElement('h3');
  name.innerHTML = restaurant.name;
  li.append(name);
};

var appendRestaurantNeighborhood = function appendRestaurantNeighborhood(restaurant, li) {
  var neighborhood = document.createElement('p');
  neighborhood.innerHTML = restaurant.neighborhood;
  li.append(neighborhood);
};

var appendRestaurantAddress = function appendRestaurantAddress(restaurant, li) {
  var address = document.createElement('p');
  address.innerHTML = restaurant.address;
  li.append(address);
};

var appendRestaurantDetails = function appendRestaurantDetails(restaurant, li) {
  var more = document.createElement('a');
  more.innerHTML = 'View Details';
  more.href = DBHelper.urlForRestaurant(restaurant);
  li.append(more);
};

/**
    * Add markers for current restaurants to the map.
    */
var addMarkersToMap = function addMarkersToMap() {var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;
  restaurants.forEach(function (restaurant) {
    // Add marker to the map
    var marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);
    google.maps.event.addListener(marker, 'click', function () {
      window.location.href = marker.url;
    });
    self.markers.push(marker);
  });
};

var appendRestaurantItems = function appendRestaurantItems(restaurant, li) {
  appendRestaurantImage(restaurant, li);
  appendRestaurantTitle(restaurant, li);
  appendRestaurantNeighborhood(restaurant, li);
  appendRestaurantAddress(restaurant, li);
  appendRestaurantDetails(restaurant, li);
};

/**
    * Create restaurant HTML.
    */
var createRestaurantHTML = function createRestaurantHTML(restaurant) {
  var li = document.createElement('li');
  appendRestaurantItems(restaurant, li);
  return li;
};

/**
    * Create all restaurants HTML and add them to the webpage.
    */
var fillRestaurantsHTML = function fillRestaurantsHTML() {var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;
  var ul = document.getElementById('restaurants-list');
  restaurants.forEach(function (restaurant) {
    ul.append(createRestaurantHTML(restaurant));
  });
  addMarkersToMap();
};
/**
    * Fetch all neighborhoods and set their HTML.
    */
var fetchNeighborhoods = function fetchNeighborhoods() {
  DBHelper.fetchNeighborhoods(function (error, neighborhoods) {
    if (error) {
      // Got an error
      console.error(error);
    } else {
      neighborhoods = neighborhoods;
      fillNeighborhoodsHTML();
    }
  });
};

/**
    * Clear current restaurants, their HTML and remove their map markers.
    */
var resetRestaurants = function resetRestaurants(restaurants) {
  // Remove all restaurants
  self.restaurants = [];
  var ul = document.getElementById('restaurants-list');
  ul.innerHTML = '';

  // Remove all map markers
  self.markers.forEach(function (m) {return m.setMap(null);});
  self.markers = [];
  self.restaurants = restaurants;
};

/**
    * Update page and map for current restaurants.
    */
var updateRestaurants = function updateRestaurants() {
  var cSelect = document.getElementById('cuisines-select');
  var nSelect = document.getElementById('neighborhoods-select');

  var cIndex = cSelect.selectedIndex;
  var nIndex = nSelect.selectedIndex;

  var cuisine = cSelect[cIndex].value;
  var neighborhood = nSelect[nIndex].value;

  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood,
  function (error, restaurants) {
    if (error) {
      // Got an error!
      console.error(error);
    } else {
      resetRestaurants(restaurants);
      fillRestaurantsHTML();
    }
  });
};

/**
    * Fetch neighborhoods and cuisines as soon as the page is loaded.
    */
document.addEventListener('DOMContentLoaded', function () {
  fetchNeighborhoods();
  fetchCuisines();
});

/**
     * Initialize Google map, called from HTML.
     */
window.initMap = function () {
  var loc = {
    lat: 40.722216,
    lng: -73.987501 };

  self.map = new google.maps.Map(document.getElementById('map'), {
    zoom: 12,
    center: loc,
    scrollwheel: false });

  var loadedMap = self.map;
  // disable keyboard navigation for google maps
  google.maps.event.addListener(loadedMap, 'tilesloaded', function () {
    document.querySelectorAll('#map a').forEach(function (item) {
      item.setAttribute('tabindex', '-1');
    });
    document.querySelectorAll('#map area').forEach(function (item) {
      item.setAttribute('tabindex', '-1');
    });
  });
  updateRestaurants();
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsicmVzdGF1cmFudHMiLCJuZWlnaGJvcmhvb2RzIiwiY3Vpc2luZXMiLCJtYXAiLCJtYXJrZXJzIiwibmF2aWdhdG9yIiwic2VydmljZVdvcmtlciIsInJlZ2lzdGVyIiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCJjYXRjaCIsImVyciIsImZpbGxDdWlzaW5lc0hUTUwiLCJzZWxmIiwic2VsZWN0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImZvckVhY2giLCJvcHRpb24iLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiY3Vpc2luZSIsInZhbHVlIiwiYXBwZW5kIiwiZmV0Y2hDdWlzaW5lcyIsIkRCSGVscGVyIiwiZXJyb3IiLCJmaWxsTmVpZ2hib3Job29kc0hUTUwiLCJuZWlnaGJvcmhvb2QiLCJhcHBlbmRSZXN0YXVyYW50SW1hZ2UiLCJyZXN0YXVyYW50IiwibGkiLCJpbWFnZSIsImNsYXNzTmFtZSIsInNyYyIsImltYWdlVXJsRm9yUmVzdGF1cmFudCIsImFsdCIsIm5hbWUiLCJhcHBlbmRSZXN0YXVyYW50VGl0bGUiLCJhcHBlbmRSZXN0YXVyYW50TmVpZ2hib3Job29kIiwiYXBwZW5kUmVzdGF1cmFudEFkZHJlc3MiLCJhZGRyZXNzIiwiYXBwZW5kUmVzdGF1cmFudERldGFpbHMiLCJtb3JlIiwiaHJlZiIsInVybEZvclJlc3RhdXJhbnQiLCJhZGRNYXJrZXJzVG9NYXAiLCJtYXJrZXIiLCJtYXBNYXJrZXJGb3JSZXN0YXVyYW50IiwiZ29vZ2xlIiwibWFwcyIsImV2ZW50IiwiYWRkTGlzdGVuZXIiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInVybCIsInB1c2giLCJhcHBlbmRSZXN0YXVyYW50SXRlbXMiLCJjcmVhdGVSZXN0YXVyYW50SFRNTCIsImZpbGxSZXN0YXVyYW50c0hUTUwiLCJ1bCIsImZldGNoTmVpZ2hib3Job29kcyIsInJlc2V0UmVzdGF1cmFudHMiLCJtIiwic2V0TWFwIiwidXBkYXRlUmVzdGF1cmFudHMiLCJjU2VsZWN0IiwiblNlbGVjdCIsImNJbmRleCIsInNlbGVjdGVkSW5kZXgiLCJuSW5kZXgiLCJmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmVBbmROZWlnaGJvcmhvb2QiLCJhZGRFdmVudExpc3RlbmVyIiwiaW5pdE1hcCIsImxvYyIsImxhdCIsImxuZyIsIk1hcCIsInpvb20iLCJjZW50ZXIiLCJzY3JvbGx3aGVlbCIsImxvYWRlZE1hcCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpdGVtIiwic2V0QXR0cmlidXRlIl0sIm1hcHBpbmdzIjoiY0FBQTtBQUNBO0FBQ0EsSUFBSUEsb0JBQUo7QUFDRUMsc0JBREY7QUFFRUMsaUJBRkY7QUFHQSxJQUFJQyxHQUFKO0FBQ0EsSUFBSUMsVUFBVSxFQUFkOztBQUVBOzs7O0FBSUEsSUFBSSxtQkFBbUJDLFNBQXZCLEVBQWtDO0FBQ2hDQSxZQUFVQyxhQUFWLENBQXdCQyxRQUF4QixDQUFpQyxTQUFqQyxFQUE0Q0MsSUFBNUMsQ0FBaUQsWUFBTTtBQUNyREMsWUFBUUMsR0FBUixDQUFZLDRCQUFaO0FBQ0QsR0FGRDtBQUdDQyxPQUhELENBR08sZUFBTztBQUNaRixZQUFRQyxHQUFSLENBQVlFLEdBQVo7QUFDRCxHQUxEO0FBTUQ7O0FBRUQ7OztBQUdBLElBQU1DLG1CQUFtQixTQUFuQkEsZ0JBQW1CLEdBQThCLEtBQTdCWCxRQUE2Qix1RUFBbEJZLEtBQUtaLFFBQWE7QUFDckQsTUFBTWEsU0FBU0MsU0FBU0MsY0FBVCxDQUF3QixpQkFBeEIsQ0FBZjtBQUNBZixXQUFTZ0IsT0FBVCxDQUFpQixtQkFBVztBQUMxQixRQUFNQyxTQUFTSCxTQUFTSSxhQUFULENBQXVCLFFBQXZCLENBQWY7QUFDQUQsV0FBT0UsU0FBUCxHQUFtQkMsT0FBbkI7QUFDQUgsV0FBT0ksS0FBUCxHQUFlRCxPQUFmO0FBQ0FQLFdBQU9TLE1BQVAsQ0FBY0wsTUFBZDtBQUNELEdBTEQ7QUFNRCxDQVJEOztBQVVBOzs7QUFHQSxJQUFNTSxnQkFBZ0IsU0FBaEJBLGFBQWdC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c0JBOzs7QUFHQTVDLFNBQVN5RCxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsWUFBTTtBQUNsRFg7QUFDQXJDO0FBQ0QsQ0FIRDs7QUFLQTs7O0FBR0E2QixPQUFPb0IsT0FBUCxHQUFpQixZQUFNO0FBQ3JCLE1BQUlDLE1BQU07QUFDUkMsU0FBSyxTQURHO0FBRVJDLFNBQUssQ0FBQyxTQUZFLEVBQVY7O0FBSUEvRCxPQUFLWCxHQUFMLEdBQVcsSUFBSStDLE9BQU9DLElBQVAsQ0FBWTJCLEdBQWhCLENBQW9COUQsU0FBU0MsY0FBVCxDQUF3QixLQUF4QixDQUFwQixFQUFvRDtBQUM3RDhELFVBQU0sRUFEdUQ7QUFFN0RDLFlBQVFMLEdBRnFEO0FBRzdETSxpQkFBYSxLQUhnRCxFQUFwRCxDQUFYOztBQUtBLE1BQU1DLFlBQVlwRSxLQUFLWCxHQUF2QjtBQUNBO0FBQ0ErQyxTQUFPQyxJQUFQLENBQVlDLEtBQVosQ0FBa0JDLFdBQWxCLENBQThCNkIsU0FBOUIsRUFBeUMsYUFBekMsRUFBd0QsWUFBTTtBQUM1RGxFLGFBQVNtRSxnQkFBVCxDQUEwQixRQUExQixFQUFvQ2pFLE9BQXBDLENBQTRDLGdCQUFRO0FBQ2xEa0UsV0FBS0MsWUFBTCxDQUFrQixVQUFsQixFQUE4QixJQUE5QjtBQUNELEtBRkQ7QUFHQXJFLGFBQVNtRSxnQkFBVCxDQUEwQixXQUExQixFQUF1Q2pFLE9BQXZDLENBQStDLGdCQUFRO0FBQ3JEa0UsV0FBS0MsWUFBTCxDQUFrQixVQUFsQixFQUE4QixJQUE5QjtBQUNELEtBRkQ7QUFHRCxHQVBEO0FBUUFuQjtBQUNELENBckJEIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbi8qZ2xvYmFsICBEQkhlbHBlciwgZ29vZ2xlKi9cbmxldCByZXN0YXVyYW50cyxcbiAgbmVpZ2hib3Job29kcyxcbiAgY3Vpc2luZXNcbnZhciBtYXBcbnZhciBtYXJrZXJzID0gW107XG5cbi8qKlxuICogQWRkIHNlcnZpY2Ugd29ya2VyIHRvIG1haW4gcGFnZVxuICovXG5cbmlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XG4gIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCcuL3N3LmpzJykudGhlbigoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ3NlcnZpY2Ugd29ya2VyIHJlZ2lzdGVyZWQhJyk7XG4gIH0pXG4gIC5jYXRjaChlcnIgPT4ge1xuICAgIGNvbnNvbGUubG9nKGVycik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFNldCBjdWlzaW5lcyBIVE1MLlxuICovXG5jb25zdCBmaWxsQ3Vpc2luZXNIVE1MID0gKGN1aXNpbmVzID0gc2VsZi5jdWlzaW5lcykgPT4ge1xuICBjb25zdCBzZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3Vpc2luZXMtc2VsZWN0Jyk7XG4gIGN1aXNpbmVzLmZvckVhY2goY3Vpc2luZSA9PiB7XG4gICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgb3B0aW9uLmlubmVySFRNTCA9IGN1aXNpbmU7XG4gICAgb3B0aW9uLnZhbHVlID0gY3Vpc2luZTtcbiAgICBzZWxlY3QuYXBwZW5kKG9wdGlvbik7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBGZXRjaCBhbGwgY3Vpc2luZXMgYW5kIHNldCB0aGVpciBIVE1MLlxuICovXG5jb25zdCBmZXRjaEN1aXNpbmVzID0gKCkgPT4ge1xuICBEQkhlbHBlci5mZXRjaEN1aXNpbmVzKChlcnJvciwgY3Vpc2luZXMpID0+IHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIC8vIEdvdCBhbiBlcnJvciFcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdWlzaW5lcyA9IGN1aXNpbmVzO1xuICAgICAgZmlsbEN1aXNpbmVzSFRNTCgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIFNldCBuZWlnaGJvcmhvb2RzIEhUTUwuXG4gKi9cbmNvbnN0IGZpbGxOZWlnaGJvcmhvb2RzSFRNTCA9IChuZWlnaGJvcmhvb2RzID0gc2VsZi5uZWlnaGJvcmhvb2RzKSA9PiB7XG4gIGNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZWlnaGJvcmhvb2RzLXNlbGVjdCcpO1xuICBuZWlnaGJvcmhvb2RzLmZvckVhY2gobmVpZ2hib3Job29kID0+IHtcbiAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICBvcHRpb24uaW5uZXJIVE1MID0gbmVpZ2hib3Job29kO1xuICAgIG9wdGlvbi52YWx1ZSA9IG5laWdoYm9yaG9vZDtcbiAgICBzZWxlY3QuYXBwZW5kKG9wdGlvbik7XG4gIH0pO1xufTtcblxuY29uc3QgYXBwZW5kUmVzdGF1cmFudEltYWdlID0gKHJlc3RhdXJhbnQsIGxpKSA9PiB7XG4gIGNvbnN0IGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gIGltYWdlLmNsYXNzTmFtZSA9ICdyZXN0YXVyYW50LWltZyc7XG4gIGltYWdlLnNyYyA9IERCSGVscGVyLmltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KTtcbiAgaW1hZ2UuYWx0ID0gYFJlc3RhdXJhbnQ6ICR7cmVzdGF1cmFudC5uYW1lfWA7XG4gIGxpLmFwcGVuZChpbWFnZSk7XG59O1xuXG5jb25zdCBhcHBlbmRSZXN0YXVyYW50VGl0bGUgPSAocmVzdGF1cmFudCwgbGkpID0+IHtcbiAgY29uc3QgbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gIG5hbWUuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uYW1lO1xuICBsaS5hcHBlbmQobmFtZSk7XG59O1xuXG5jb25zdCBhcHBlbmRSZXN0YXVyYW50TmVpZ2hib3Job29kID0gKHJlc3RhdXJhbnQsIGxpKSA9PiB7XG4gIGNvbnN0IG5laWdoYm9yaG9vZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgbmVpZ2hib3Job29kLmlubmVySFRNTCA9IHJlc3RhdXJhbnQubmVpZ2hib3Job29kO1xuICBsaS5hcHBlbmQobmVpZ2hib3Job29kKTtcbn07XG5cbmNvbnN0IGFwcGVuZFJlc3RhdXJhbnRBZGRyZXNzID0gKHJlc3RhdXJhbnQsIGxpKSA9PiB7XG4gIGNvbnN0IGFkZHJlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIGFkZHJlc3MuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5hZGRyZXNzO1xuICBsaS5hcHBlbmQoYWRkcmVzcyk7XG59O1xuXG5jb25zdCBhcHBlbmRSZXN0YXVyYW50RGV0YWlscyA9IChyZXN0YXVyYW50LCBsaSkgPT4ge1xuICBjb25zdCBtb3JlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICBtb3JlLmlubmVySFRNTCA9ICdWaWV3IERldGFpbHMnO1xuICBtb3JlLmhyZWYgPSBEQkhlbHBlci51cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpO1xuICBsaS5hcHBlbmQobW9yZSk7XG59O1xuXG4vKipcbiAqIEFkZCBtYXJrZXJzIGZvciBjdXJyZW50IHJlc3RhdXJhbnRzIHRvIHRoZSBtYXAuXG4gKi9cbmNvbnN0IGFkZE1hcmtlcnNUb01hcCA9IChyZXN0YXVyYW50cyA9IHNlbGYucmVzdGF1cmFudHMpID0+IHtcbiAgcmVzdGF1cmFudHMuZm9yRWFjaChyZXN0YXVyYW50ID0+IHtcbiAgICAvLyBBZGQgbWFya2VyIHRvIHRoZSBtYXBcbiAgICBjb25zdCBtYXJrZXIgPSBEQkhlbHBlci5tYXBNYXJrZXJGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQsIHNlbGYubWFwKTtcbiAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsICgpID0+IHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gbWFya2VyLnVybDtcbiAgICB9KTtcbiAgICBzZWxmLm1hcmtlcnMucHVzaChtYXJrZXIpO1xuICB9KTtcbn07XG5cbmNvbnN0IGFwcGVuZFJlc3RhdXJhbnRJdGVtcyA9IChyZXN0YXVyYW50LCBsaSkgPT4ge1xuICBhcHBlbmRSZXN0YXVyYW50SW1hZ2UocmVzdGF1cmFudCwgbGkpO1xuICBhcHBlbmRSZXN0YXVyYW50VGl0bGUocmVzdGF1cmFudCwgbGkpO1xuICBhcHBlbmRSZXN0YXVyYW50TmVpZ2hib3Job29kKHJlc3RhdXJhbnQsIGxpKTtcbiAgYXBwZW5kUmVzdGF1cmFudEFkZHJlc3MocmVzdGF1cmFudCwgbGkpO1xuICBhcHBlbmRSZXN0YXVyYW50RGV0YWlscyhyZXN0YXVyYW50LCBsaSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSByZXN0YXVyYW50IEhUTUwuXG4gKi9cbmNvbnN0IGNyZWF0ZVJlc3RhdXJhbnRIVE1MID0gcmVzdGF1cmFudCA9PiB7XG4gIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgYXBwZW5kUmVzdGF1cmFudEl0ZW1zKHJlc3RhdXJhbnQsIGxpKTtcbiAgcmV0dXJuIGxpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYWxsIHJlc3RhdXJhbnRzIEhUTUwgYW5kIGFkZCB0aGVtIHRvIHRoZSB3ZWJwYWdlLlxuICovXG5jb25zdCBmaWxsUmVzdGF1cmFudHNIVE1MID0gKHJlc3RhdXJhbnRzID0gc2VsZi5yZXN0YXVyYW50cykgPT4ge1xuICBjb25zdCB1bCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXVyYW50cy1saXN0Jyk7XG4gIHJlc3RhdXJhbnRzLmZvckVhY2gocmVzdGF1cmFudCA9PiB7XG4gICAgdWwuYXBwZW5kKGNyZWF0ZVJlc3RhdXJhbnRIVE1MKHJlc3RhdXJhbnQpKTtcbiAgfSk7XG4gIGFkZE1hcmtlcnNUb01hcCgpO1xufTtcbi8qKlxuICogRmV0Y2ggYWxsIG5laWdoYm9yaG9vZHMgYW5kIHNldCB0aGVpciBIVE1MLlxuICovXG5jb25zdCBmZXRjaE5laWdoYm9yaG9vZHMgPSAoKSA9PiB7XG4gIERCSGVscGVyLmZldGNoTmVpZ2hib3Job29kcygoZXJyb3IsIG5laWdoYm9yaG9vZHMpID0+IHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIC8vIEdvdCBhbiBlcnJvclxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5laWdoYm9yaG9vZHMgPSBuZWlnaGJvcmhvb2RzO1xuICAgICAgZmlsbE5laWdoYm9yaG9vZHNIVE1MKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogQ2xlYXIgY3VycmVudCByZXN0YXVyYW50cywgdGhlaXIgSFRNTCBhbmQgcmVtb3ZlIHRoZWlyIG1hcCBtYXJrZXJzLlxuICovXG5jb25zdCByZXNldFJlc3RhdXJhbnRzID0gcmVzdGF1cmFudHMgPT4ge1xuICAvLyBSZW1vdmUgYWxsIHJlc3RhdXJhbnRzXG4gIHNlbGYucmVzdGF1cmFudHMgPSBbXTtcbiAgY29uc3QgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudHMtbGlzdCcpO1xuICB1bC5pbm5lckhUTUwgPSAnJztcblxuICAvLyBSZW1vdmUgYWxsIG1hcCBtYXJrZXJzXG4gIHNlbGYubWFya2Vycy5mb3JFYWNoKG0gPT4gbS5zZXRNYXAobnVsbCkpO1xuICBzZWxmLm1hcmtlcnMgPSBbXTtcbiAgc2VsZi5yZXN0YXVyYW50cyA9IHJlc3RhdXJhbnRzO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgcGFnZSBhbmQgbWFwIGZvciBjdXJyZW50IHJlc3RhdXJhbnRzLlxuICovXG5jb25zdCB1cGRhdGVSZXN0YXVyYW50cyA9ICgpID0+IHtcbiAgY29uc3QgY1NlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdWlzaW5lcy1zZWxlY3QnKTtcbiAgY29uc3QgblNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZWlnaGJvcmhvb2RzLXNlbGVjdCcpO1xuXG4gIGNvbnN0IGNJbmRleCA9IGNTZWxlY3Quc2VsZWN0ZWRJbmRleDtcbiAgY29uc3QgbkluZGV4ID0gblNlbGVjdC5zZWxlY3RlZEluZGV4O1xuXG4gIGNvbnN0IGN1aXNpbmUgPSBjU2VsZWN0W2NJbmRleF0udmFsdWU7XG4gIGNvbnN0IG5laWdoYm9yaG9vZCA9IG5TZWxlY3RbbkluZGV4XS52YWx1ZTtcblxuICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmVBbmROZWlnaGJvcmhvb2QoY3Vpc2luZSwgbmVpZ2hib3Job29kLFxuICAgIChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAvLyBHb3QgYW4gZXJyb3IhXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzZXRSZXN0YXVyYW50cyhyZXN0YXVyYW50cyk7XG4gICAgICAgIGZpbGxSZXN0YXVyYW50c0hUTUwoKTtcbiAgICAgIH1cbiAgICB9KTtcbn07XG5cbi8qKlxuICogRmV0Y2ggbmVpZ2hib3Job29kcyBhbmQgY3Vpc2luZXMgYXMgc29vbiBhcyB0aGUgcGFnZSBpcyBsb2FkZWQuXG4gKi9cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gIGZldGNoTmVpZ2hib3Job29kcygpO1xuICBmZXRjaEN1aXNpbmVzKCk7XG59KTtcblxuLyoqXG4gKiBJbml0aWFsaXplIEdvb2dsZSBtYXAsIGNhbGxlZCBmcm9tIEhUTUwuXG4gKi9cbndpbmRvdy5pbml0TWFwID0gKCkgPT4ge1xuICBsZXQgbG9jID0ge1xuICAgIGxhdDogNDAuNzIyMjE2LFxuICAgIGxuZzogLTczLjk4NzUwMVxuICB9O1xuICBzZWxmLm1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpLCB7XG4gICAgem9vbTogMTIsXG4gICAgY2VudGVyOiBsb2MsXG4gICAgc2Nyb2xsd2hlZWw6IGZhbHNlXG4gIH0pO1xuICBjb25zdCBsb2FkZWRNYXAgPSBzZWxmLm1hcDtcbiAgLy8gZGlzYWJsZSBrZXlib2FyZCBuYXZpZ2F0aW9uIGZvciBnb29nbGUgbWFwc1xuICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihsb2FkZWRNYXAsICd0aWxlc2xvYWRlZCcsICgpID0+IHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjbWFwIGEnKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgfSk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI21hcCBhcmVhJykuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICAgIH0pO1xuICB9KTtcbiAgdXBkYXRlUmVzdGF1cmFudHMoKTtcbn07XG4iXX0=
